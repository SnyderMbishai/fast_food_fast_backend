FORMAT: 1A
HOST: https://fastfoodfastapi1n2.herokuapp.com/

# fast_food_fast

fast_food_fast is an API application that lets users signup, signin,
make orders and check their order history. The admin can create meals,
accept/reject orders and mark an order as complete.

## Signup [/api/v2/users/signup]

### Register a User [POST]

You may register as a user using this action. It takes a JSON
object containing a username, email, password and password confirmation.

+ Request (application/json)

        {
            "username": "Pruddy",
            "email" : "Pruddy@gmail.com",
            "password": "password",
            "confirm_password": "password"
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v2/users/signup

    + Body

            {
                "message": "User registration successful",
                "user": {
                    "email": "Pruddy@gmail.com",
                    "id": 3,
                    "username": "Pruddy"
                }
                            
            }

## Signin [/api/v2/users/signin]
### Signin a User [POST]

You may signing if you are already registered using this action. 
It takes a JSON object containing a username and password.

+ Request (application/json)

        {
            "username": "Pruddy",
            "password":"password"
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/users/signin

    + Body

            {
                "message": "User login successful.",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlBydWRkeSIsImNyZWF0ZWRfYXQiOjE1Mzg1OTM4MzkuMjIxNTkxLCJ1c2VyX2lkIjozLCJleHAiOjE1Mzg5NTM4MzkuMjIxNTkyLCJyb2xlcyI6WyJ1c2VyIl19.QSAbq7emNXfM6HWwIqv1JqOwDkEt2SOmTOSn6LP__wc"
            }

## User Promotion [/api/v2/users/manage/{user_id}]

+ Parameters
    + user_id (number) - ID of the user

### Promote a User [PUT]

Admin can promote a user using this action. 

+ Request (application/json)

        {
        
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/users/manage/{user_id}

    + Body

            {
                "message": "User has been made admin successfully!"
            }


## Meals [/api/v2/meals]

### Create a Meal [POST]

Admin can create a meal using this action. It takes a JSON
object containing name and price.

+ Request (application/json)

           {
                "name":"chapati chicken",
                "price":500
           }

+ Response 201 (application/json)

    + Headers

            Location: /api/v2/meals
    + Body

            {
                "meal": {
                "id": 1,
                "name": "chapati chicken",
                "price": 500
                    },
            "message": "Meal successfully added."
                
            }

### List All Meals [GET]

Admin/user can list all meals using this action.

+ Response 200 (application/json)

        
            {
                "meals": [
                    {
                        "id": 1,
                        "name": "chapati chicken",
                        "price": 500
                    }
                ]
                     
            }
        

## Single Meal [/api/v2/meals/{meal_id}]

+ Parameters
    + meal_id (number) - ID of the meal

### List a Meal [GET]

Admin/user can list a meal using this action.

+ Response 200 (application/json)

        
            {
                "meal": {
                    "id": 1,
                    "name": "chapati chicken",
                    "price": 500
                },
                "message": "Meal found."
            }
        

### Edit a Meal [PUT]

Admin can edit a meal using this action. It takes a JSON
object containing name or price or both.

+ Request (application/json)

        {
            "name":"Rice beef"
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/meals/{meal_id}

    + Body

            {
                "message": "Meal has been updated successfully.",
                "new_meal": {
                    "id": 1,
                    "name": "Rice beef",
                    "price": 500
                }
                
            }

### Delete a Meal [DELETE]

Admin can delete a meal using this action.

+ Response 200 (application/json)

        
            {
                "message": "Meal 1 successfully deleted."
            }
            
## Orders [/api/v2/orders/]

### Create an Order [POST]

Admin can create an order using this action. It takes a JSON
object containing the user ID and the meal details(dict).

+ Request (application/json)

        {
            "meal_dict": {
                "1":2
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: /api/v2/orders/

    + Body

            {
                "meals": [
                    {
                        "meal_id": 1,
                        "meal_name": "chapati chicken",
                        "order_item_id": 1,
                        "quantity": 2
                    }
                ],
                "message": "Order has been created successfully.",
                "order_id": 1
                
            }

### List All Orders [GET]

Admin/user can fetch all orders using this action.

+ Response 200 (application/json)

        
            {
                "message": "Orders found.",
                "orders": [
                    {
                        "accepted": false,
                        "completed": false,
                        "created_at": 1538601358.53,
                        "meals": [
                            {
                                "meal_id": 1,
                                "meal_name": "chapati chicken",
                                "order_item_id": 1,
                                "quantity": 2
                            }
                        ],
                        "order_id": 1,
                        "total": 1000,
                        "user_id": 2
                    }
                ]
                                 
            }
        

## Single Order [/api/v2/orders/{order_id}]

+ Parameters
    + order_id (number) - ID of the order

### List a Specific Order [GET]

Admin/user can list a specific meal using this action.

+ Response 200 (application/json)

        
            {
                "message": "Order found.",
                "order": {
                    "accepted": false,
                    "completed": false,
                    "created_at": 1538601358.53,
                    "meals": [
                        {
                            "meal_id": 1,
                            "meal_name": "chapati chicken",
                            "order_item_id": 1,
                            "quantity": 2
                        }
                    ],
                    "order_id": 1,
                    "total": 1000,
                    "user_id": 2
                }
            }
        

### Edit an order [PUT]

Admin/user can edit an order using this action. It takes a JSON
object containing the detail to be changed.

+ Request (application/json)

        {
            "new_data":{"meals_dict":{"1":3}}
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/meals/{order_id}

    + Body

            {
                "message": "Order updated successfully.", 
                "new_order": {
                    "order_id":1,
                    "user_id":2,
                    "completed":false,
                    "accepted":false,
                    "created_at":1538801358.53
                    "meals": [
                        {
                            "meal_id": 1,
                            "meal_name": "chapati chicken",
                            "order_item_id": 1,
                            "quantity": 3
                        }
                    ],
                    "order_id": 1,
                    "total": 1500,
                    "user_id": 2
                    }
                
            }
            


### Mark an Order as Complete [PATCH]

Admin/user can mark an order as complete using this action.

+ Response 200 (application/json)

        
            {
                "message": "Order 1 has been completed."
            }


     

### Delete an Order [DELETE]

Admin/user can delete an order using this action.

+ Response 200 (application/json)

        
            {
                "message": "Order successfully deleted."
            }

## Order Management [/api/v2/orders/accept/{order_id}]

+ Parameters
    + order_id (number) - ID of the order
    
### Accept/Decline an order [PATCH]

Admin can accept or decline an order using this action.

+ Request (application/json)

        {
            "accepted": true
        }

+ Response 200 (application/json)

    + Headers

            Location: /api/v2/orders/accept/{order_id}

    + Body

            {
                "message": "Order 1 has been accepted"
            }